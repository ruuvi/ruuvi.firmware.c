---

# Notes:

# This file has been updated from v0.X sample to v1.0.1-compatible configuration. 
# Some options might not be valid anymore. 

# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_auxiliary_dependencies: TRUE
  :use_test_preprocessor: :all
  :build_root: build
#  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: gem
  :default_tasks:
    - test:all

# Return error on test fail
  :test_build:
    :graceful_fail: true

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

:environment:

:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - src/**
    - nRF5_SDK_15.3.0_59ac345/components/**
    - nRF5_SDK_15.3.0_59ac345/integration/**
    - nRF5_SDK_15.3.0_59ac345/modules/**
  :support:
    - test/support
  :include:
    - src/**
    - nRF5_SDK_15.3.0_59ac345/components/**
    - nRF5_SDK_15.3.0_59ac345/integration/**
    - nRF5_SDK_15.3.0_59ac345/modules/**

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines
    - BOARD_RUUVITAG_B
    - BOARD_CUSTOM
    - NRF52832_XXAA
    - CMOCK
    - CEEDLING
    - APPLICATION_ENDPOINTS_CONFIGURED
    - UNITY_INCLUDE_FLOAT
  :test:
    - *common_defines
    - TEST
    - UNITY_EXCLUDE_FLOAT
  :test_preprocess:
    - *common_defines
    - TEST
    - UNITY_EXCLUDE_FLOAT

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :unity_helper_path: test/support/unity_helper.h
  :plugins:
    - :array
    - :ignore
    - :ignore_arg
    - :callback
    - :return_thru_ptr
    - :expect_any_args
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use
  :test_linker:
    :executable: gcc                  #absolute file path
    :name: 'gcc linker'
    :arguments:
      - ${1}                          #list of object files to link (Ruby method call param list sub)
      - -lm                           #link with math header
      - -o ${2}                       #executable file output (Ruby method call param list sub)

:tools_gcov_linker:
  :arguments:
    - -lm

# Add -gcov to the plugins list to make sure of the gcov plugin
# You will need to have gcov and gcovr both installed to make it work.
# For more information on these options, see docs in plugins/gcov
:gcov:
  :reports:
    - SonarQube
  :gcovr:                        # `gcovr` common and report-specific options
    :report_root: "../../"       # Atypical layout -- project.yml is inside a subdirectoy below <build root>
    :sort_percentage: TRUE
    :sort_uncovered: FALSE
    :html_medium_threshold: 60
    :html_high_threshold: 85
    :print_summary: TRUE
    :threads: 4
    :keep: FALSE
    :report_exclude: "src/ruuvi.drivers.c/BME280_driver|src/ruuvi.drivers.c/embedded-sht|src/ruuvi.drivers.c/STMems_Standard_C_drivers|nRF5_SDK_15.3.0_59ac345:|^build|^vendor|^test|^support"


# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "${1}"  # or "-L ${1}" for example
  :test: []
  :release: []

:plugins:
  :enabled:
    - module_generator
    - gcov
    - report_tests_pretty_stdout
...